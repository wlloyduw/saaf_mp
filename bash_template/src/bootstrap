#!/bin/sh

set -euo pipefail

# Initialization - load function handler
source $LAMBDA_TASK_ROOT/"$(echo $_HANDLER | cut -d. -f1).sh"

# Processing
while true
do

  #
  # GET REQUEST
  # 
  HEADERS="$(mktemp)"
  # Get an event
  EVENT_DATA=$(curl -sS -LD "$HEADERS" -X GET "http://${AWS_LAMBDA_RUNTIME_API}/2018-06-01/runtime/invocation/next")
  REQUEST_ID=$(grep -Fi Lambda-Runtime-Aws-Request-Id "$HEADERS" | tr -d '[:space:]' | cut -d: -f2)

  #
  # FaaS Inspector Bash Version
  #
  # @author Wes Lloyd
  # @author Robert Cordingly
  #

  # Version variables.
  version=0.1
  lang="bash"
  startTime=$(($(date +%s%N)/1000000))

  # Generate UUID, check if container exists, stamp container.
  uuid=0
  newContainer=0
  if [ ! -f /tmp/container-id ]; then
      uuid=$(env | grep AWS_LAMBDA_LOG_STREAM_NAME= | cut -c 28-)
      echo "$uuid" >> /tmp/container-id
      newContainer=1
  else
      uuid=$(cat /tmp/container-id)
  fi
  vmuptime=$(grep 'btime' /proc/stat | cut -c 7-)
  contextSwitches=$(grep 'ctxt' /proc/stat | cut -c 6-)

  # Get CPU Metrics
  IFS=' ' read -r -a CPUMetrics <<< "$(cat /proc/stat | grep "^cpu" | head -1)"
  cpuUsr=${CPUMetrics[1]}
  cpuNice=${CPUMetrics[2]}
  cpuKrn=${CPUMetrics[3]}
  cpuIdle=${CPUMetrics[4]}
  cpuIowait=${CPUMetrics[5]}
  cpuIrq=${CPUMetrics[6]}
  cpuSoftIrq=${CPUMetrics[7]}
  vmcpusteal=${CPUMetrics[8]}

  # Get CPU Information
  cpuModel=$(grep 'model' /proc/cpuinfo | head -1 | cut -c 10-)
  cpuType=$(grep 'model name' /proc/cpuinfo | head -1 | cut -c 14-)

  # Get Lambda VM ID
  vmID=$(cat /proc/self/cgroup | grep '2:cpu' | head -1 | cut -c 21- | head -c 6)

  # Get framework runtime.
  frameworkEnd=$(($(date +%s%N)/1000000))
  frameworkRuntime=$((frameworkEnd-startTime))

  # Execute the handler function from the script
  RESPONSE=$($(echo "$_HANDLER" | cut -d. -f2) "$EVENT_DATA")

  # Finalize runtime and calculate deltas.
  endTime=$(($(date +%s%N)/1000000))
  runtime=$((endTime-startTime))
  IFS=' ' read -r -a CPUMetrics <<< "$(cat /proc/stat | grep "^cpu" | head -1)"
  cpuUsrDelta=$((CPUMetrics[1]-cpuUsr))
  cpuNiceDelta=$((CPUMetrics[2]-cpuNice))
  cpuKrnDelta=$((CPUMetrics[3]-cpuKrn))
  cpuIdleDelta=$((CPUMetrics[4]-cpuIdle))
  cpuIowaitDelta=$((CPUMetrics[5]-cpuIowait))
  cpuIrqDelta=$((CPUMetrics[6]-cpuIrq))
  cpuSoftIrqDelta=$((CPUMetrics[7]-cpuSoftIrq))
  vmcpustealDelta=$((CPUMetrics[8]-vmcpusteal))

  endContextSwitches=$(grep 'ctxt' /proc/stat | cut -c 6-)
  contextSwitchDelta=$((endContextSwitches-contextSwitches))

  # Build Json response.
  jsonString=$( ./dependencies/jq-linux64.dms -n \
              --arg version "$version" \
              --arg lang "$lang" \
              --arg uuid "$uuid" \
              --arg newcontainer "$newContainer" \
              --arg vmuptime "$vmuptime" \
              --arg contextSwitches "$contextSwitches" \
              --arg cpuUsr "$cpuUsr" \
              --arg cpuNice "$cpuNice" \
              --arg cpuKrn "$cpuKrn" \
              --arg cpuIdle "$cpuIdle" \
              --arg cpuIowait "$cpuIowait" \
              --arg cpuIrq "$cpuIrq" \
              --arg cpuSoftIrq "$cpuSoftIrq" \
              --arg vmcpusteal "$vmcpusteal" \
              --arg cpuUsrDelta "$cpuUsrDelta" \
              --arg cpuNiceDelta "$cpuNiceDelta" \
              --arg cpuKrnDelta "$cpuKrnDelta" \
              --arg cpuIdleDelta "$cpuIdleDelta" \
              --arg cpuIowaitDelta "$cpuIowaitDelta" \
              --arg cpuIrqDelta "$cpuIrqDelta" \
              --arg cpuSoftIrqDelta "$cpuSoftIrqDelta" \
              --arg vmcpustealDelta "$vmcpustealDelta" \
              --arg contextSwitchDelta "$contextSwitchDelta" \
              --arg cpuModel "$cpuModel" \
              --arg cpuType "$cpuType" \
              --arg runtime "$runtime" \
              --arg frameworkRuntime "$frameworkRuntime" \
              --arg vmID "$vmID" \
              --arg response "$RESPONSE" \
              '{version: $version,
              lang: $lang,
              containerID: $uuid,
              newcontainer: $newcontainer,
              vmuptime: $vmuptime,
              contextSwitches: $contextSwitches,
              cpuUsr: $cpuUsr,
              cpuNice: $cpuNice,
              cpuKrn: $cpuKrn,
              cpuIdle: $cpuIdle,
              cpuIowait: $cpuIowait,
              cpuIrq: $cpuIrq,
              cpuSoftIrq: $cpuSoftIrq,
              vmcpusteal: $vmcpusteal,
              cpuUsrDelta: $cpuUsrDelta,
              cpuNiceDelta: $cpuNiceDelta,
              cpuKrnDelta: $cpuKrnDelta,
              cpuIdleDelta: $cpuIdleDelta,
              cpuIowaitDelta: $cpuIowaitDelta,
              cpuIrqDelta: $cpuIrqDelta,
              cpuSoftIrqDelta: $cpuSoftIrqDelta,
              vmcpustealDelta: $vmcpustealDelta,
              contextSwitchDelta: $contextSwitchDelta,
              cpuModel: $cpuModel,
              cpuType: $cpuType,
              runtime: $runtime,
              frameworkRuntime: $frameworkRuntime,
              vmID: $vmID,
              response: $response,
              }' )

  # Send the response
  curl -X POST "http://${AWS_LAMBDA_RUNTIME_API}/2018-06-01/runtime/invocation/$REQUEST_ID/response" -H "Content-Type: application/json" -d "$jsonString"
done